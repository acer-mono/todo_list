{"version":3,"sources":["redux/actionTypes.ts","components/api.ts","redux/actions.ts","components/CreateForm/CreateForm.tsx","redux/reducers/filter.ts","redux/selectors.ts","components/SearchPanel/SearchPanel.tsx","components/EditListItemForm/EditListItemForm.tsx","components/ListItem/ListItem.tsx","components/List/List.tsx","views/Todos/Todos.tsx","components/Spinner/Spinner.tsx","components/AlertItem/AlertItem.tsx","components/Alert/Alert.tsx","components/Login/Login.tsx","redux/reducers/auth.ts","App.tsx","redux/reducers/todos.ts","redux/reducers/index.ts","redux/sagas/index.ts","redux/index.ts","index.tsx"],"names":["ACTION_TYPES","URL","defaultHeaders","handleErrors","response","a","json","data","status","Error","error","REQUEST_STATUS","api","todos","add","title","fetch","method","headers","body","JSON","stringify","then","list","update","id","isChecked","delete","auth","isAuth","login","username","password","logout","clearErrors","payload","type","addError","loadMessages","setRequestStatus","requestStatus","setAuthStatus","state","addElement","dispatch","LOADING","item","SUCCESS","ERROR","message","editElement","CreateForm","useState","name","setName","requestState","useSelector","todo","useDispatch","useEffect","IDLE","createListItem","data-testid","action","onSubmit","className","value","disabled","placeholder","onChange","event","target","ITEM_STATE_FILTER","ALL","DONE","NOT_DONE","filterInitialState","searchString","category","filterReducer","selectListByItemState","itemState","filter","el","selectListByFilter","createSelector","filterString","toLowerCase","includes","selectListByFilterString","selectErrors","errors","selectItemsCount","length","SearchPanel","map","filterValues","search","setSearch","items","currentItemState","store","e","Object","entries","key","role","onClick","EditListItem","closeItem","preventDefault","undefined","submitHandler","ListItem","isEdit","setIsEdit","checked","htmlFor","style","textDecoration","List","Todos","Spinner","AlertItem","delay","timer","setTimeout","clearTimeout","Alert","Login","setUsername","setPassword","AUTH_STATE","authInitialState","authReducer","App","isLoading","authState","path","component","todoInitialState","todosReducer","nanoid","createRootReducer","history","combineReducers","router","connectRouter","rootSaga","initialAuthSaga","getElementsSaga","takeEvery","put","call","fork","createBrowserHistory","rootReducer","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","thunkMiddleware","routerMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.069d6c54.chunk.js","sourcesContent":["import { Item } from './reducers/todos';\nimport { REQUEST_STATUS } from './actions';\nimport { ITEM_STATE_FILTER_TYPE } from './reducers/filter';\n\nexport const ACTION_TYPES = {\n  REMOVE: 'remove',\n  EDIT: 'edit',\n  CREATE: 'create',\n  FILTER_CHANGED: 'filterChanged',\n  CATEGORY_CHANGED: 'categoryChanged',\n  CLEAR_ERRORS: 'clearErrors',\n  ADD_ERROR: 'addError',\n  LOAD_MESSAGES: 'loadMessages',\n  SET_REQUEST_STATUS: 'setRequestStatus',\n  SET_AUTH_STATUS: 'setAuthStatus',\n  INITIAL_AUTH: 'initialAuth'\n} as const;\n\nexport type Action =\n  | ActionRemove\n  | ActionEdit\n  | ActionCreate\n  | ActionFilterChanged\n  | ActionCategoryChanged\n  | ActionClearErrors\n  | ActionAddError\n  | ActionLoadMessages\n  | ActionChangeRequestStatus\n  | ActionSetAuthStatus\n  | ActionInitialAuth;\n\nexport type ActionInitialAuth = {\n  type: typeof ACTION_TYPES.INITIAL_AUTH;\n};\n\nexport type ActionSetAuthStatus = {\n  type: typeof ACTION_TYPES.SET_AUTH_STATUS;\n  payload: {\n    state: boolean;\n  };\n};\n\nexport type ActionChangeRequestStatus = {\n  type: typeof ACTION_TYPES.SET_REQUEST_STATUS;\n  payload: { requestStatus: REQUEST_STATUS };\n};\n\nexport type ActionClearErrors = {\n  type: typeof ACTION_TYPES.CLEAR_ERRORS;\n  payload: { id: string };\n};\n\nexport type ActionLoadMessages = {\n  type: typeof ACTION_TYPES.LOAD_MESSAGES;\n  payload: {\n    list: Item[];\n  };\n};\n\nexport type ActionAddError = {\n  type: typeof ACTION_TYPES.ADD_ERROR;\n  payload: {\n    error: string;\n  };\n};\n\nexport type ActionFilterChanged = {\n  type: typeof ACTION_TYPES.FILTER_CHANGED;\n  payload: {\n    searchString: string;\n  };\n};\n\nexport type ActionCategoryChanged = {\n  type: typeof ACTION_TYPES.CATEGORY_CHANGED;\n  payload: {\n    category: ITEM_STATE_FILTER_TYPE;\n  };\n};\n\nexport type ActionRemove = {\n  type: typeof ACTION_TYPES.REMOVE;\n  payload: {\n    id: string;\n  };\n};\n\nexport type ActionEdit = {\n  type: typeof ACTION_TYPES.EDIT;\n  payload: {\n    id: string;\n    title: string | undefined;\n    isChecked: boolean | undefined;\n  };\n};\n\nexport type ActionCreate = {\n  type: typeof ACTION_TYPES.CREATE;\n  payload: {\n    item: Item;\n  };\n};\n","const URL = 'http://localhost:3001';\nconst defaultHeaders = {\n  'Content-Type': 'application/json'\n};\nasync function handleErrors(response: any) {\n  const data = await response.json();\n  if (response.status !== 200) {\n    throw new Error(data.error);\n  }\n  return data;\n}\nconst api = {\n  todos: {\n    add: ({ title }: { title: string }) =>\n      fetch(`${URL}/todos`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        body: JSON.stringify({\n          title\n        })\n      }).then(handleErrors),\n    list: () =>\n      fetch(`${URL}/todos`, {\n        method: 'GET',\n        headers: defaultHeaders\n      }).then(handleErrors),\n    update: ({\n      id,\n      isChecked,\n      title\n    }: {\n      id: string;\n      isChecked: boolean | undefined;\n      title: string | undefined;\n    }) =>\n      fetch(`${URL}/todos/${id}`, {\n        method: 'PUT',\n        headers: defaultHeaders,\n        body: JSON.stringify({\n          id,\n          title,\n          isChecked\n        })\n      }).then(handleErrors),\n    delete: (id: string) =>\n      fetch(`${URL}/todos/${id}`, {\n        method: 'DELETE',\n        headers: defaultHeaders,\n        body: JSON.stringify({\n          id\n        })\n      }).then(handleErrors)\n  },\n  auth: {\n    isAuth: () =>\n      fetch(`${URL}/auth`, {\n        method: 'GET',\n        headers: defaultHeaders\n      }).then(handleErrors),\n    login: (username: string, password: string) =>\n      fetch(`${URL}/auth`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        body: JSON.stringify({\n          username,\n          password\n        })\n      }).then(handleErrors),\n    logout: () =>\n      fetch(`${URL}/auth`, {\n        method: 'DELETE',\n        headers: defaultHeaders\n      }).then(handleErrors)\n  }\n};\n\nexport default api;\n","import {\n  ACTION_TYPES,\n  ActionAddError,\n  ActionCategoryChanged,\n  ActionChangeRequestStatus,\n  ActionClearErrors,\n  ActionCreate,\n  ActionEdit,\n  ActionFilterChanged,\n  ActionInitialAuth,\n  ActionLoadMessages,\n  ActionRemove,\n  ActionSetAuthStatus\n} from './actionTypes';\nimport { Item } from './reducers/todos';\nimport { AppDispatch } from '.';\nimport api from '../components/api';\n\nexport enum REQUEST_STATUS {\n  IDLE,\n  LOADING,\n  SUCCESS,\n  ERROR\n}\n\nexport const create = (payload: { item: Item }): ActionCreate => ({\n  type: ACTION_TYPES.CREATE,\n  payload\n});\n\nexport const changeFilter = (payload: { searchString: string }): ActionFilterChanged => ({\n  type: ACTION_TYPES.FILTER_CHANGED,\n  payload\n});\n\nexport const changeCategory = (payload: { category: string }): ActionCategoryChanged => ({\n  type: ACTION_TYPES.CATEGORY_CHANGED,\n  payload\n});\n\nexport const remove = (payload: { id: string }): ActionRemove => ({\n  type: ACTION_TYPES.REMOVE,\n  payload\n});\n\nexport const edit = (payload: {\n  id: string;\n  title: string | undefined;\n  isChecked: boolean | undefined;\n}): ActionEdit => ({\n  type: ACTION_TYPES.EDIT,\n  payload\n});\n\nexport const clearErrors = (payload: { id: string }): ActionClearErrors => ({\n  type: ACTION_TYPES.CLEAR_ERRORS,\n  payload\n});\n\nexport const addError = (payload: { error: string }): ActionAddError => ({\n  type: ACTION_TYPES.ADD_ERROR,\n  payload\n});\n\nexport const loadMessages = (payload: { list: Item[] }): ActionLoadMessages => ({\n  type: ACTION_TYPES.LOAD_MESSAGES,\n  payload\n});\n\nexport const setRequestStatus = (status: REQUEST_STATUS): ActionChangeRequestStatus => ({\n  type: ACTION_TYPES.SET_REQUEST_STATUS,\n  payload: {\n    requestStatus: status\n  }\n});\n\nexport const initialAuthCheck = (): ActionInitialAuth => ({\n  type: ACTION_TYPES.INITIAL_AUTH\n});\n\nexport const setAuthStatus = (state: boolean): ActionSetAuthStatus => ({\n  type: ACTION_TYPES.SET_AUTH_STATUS,\n  payload: { state }\n});\n\nexport const addElement = (title: string) => async (dispatch: AppDispatch) => {\n  dispatch(setRequestStatus(REQUEST_STATUS.LOADING));\n  try {\n    const data = await api.todos.add({ title });\n    dispatch(create({ item: data }));\n    dispatch(setRequestStatus(REQUEST_STATUS.SUCCESS));\n  } catch (e) {\n    dispatch(setRequestStatus(REQUEST_STATUS.ERROR));\n    dispatch(addError({ error: e.message }));\n  }\n};\n\nexport const getElements = () => async (dispatch: AppDispatch) => {\n  dispatch(setRequestStatus(REQUEST_STATUS.LOADING));\n  try {\n    const data = await api.todos.list();\n    dispatch(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    dispatch(loadMessages({ list: data }));\n  } catch (e) {\n    dispatch(setRequestStatus(REQUEST_STATUS.ERROR));\n    dispatch(addError({ error: e.message }));\n  }\n};\n\nexport const editElement = (item: {\n  id: string;\n  isChecked: boolean | undefined;\n  title: string | undefined;\n}) => async (dispatch: AppDispatch) => {\n  dispatch(setRequestStatus(REQUEST_STATUS.LOADING));\n  try {\n    await api.todos.update(item);\n    dispatch(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    dispatch(edit({ ...item }));\n  } catch (e) {\n    dispatch(setRequestStatus(REQUEST_STATUS.ERROR));\n    dispatch(addError({ error: e.message }));\n  }\n};\n\nexport const removeElement = (id: string) => async (dispatch: AppDispatch) => {\n  dispatch(setRequestStatus(REQUEST_STATUS.LOADING));\n  try {\n    await api.todos.delete(id);\n    dispatch(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    dispatch(remove({ id: id }));\n  } catch (e) {\n    dispatch(setRequestStatus(REQUEST_STATUS.ERROR));\n    dispatch(addError({ error: e.message }));\n  }\n};\n\n/*\nexport const initialAuthCheck = () => async (dispatch: AppDispatch) => {\n  dispatch(setRequestStatus(REQUEST_STATUS.LOADING));\n  try {\n    await api.auth.isAuth();\n    dispatch(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    dispatch(setAuthStatus(true));\n  } catch (e) {\n    dispatch(setRequestStatus(REQUEST_STATUS.ERROR));\n    dispatch(setAuthStatus(false));\n    dispatch(addError({ error: e.message }));\n  }\n};\n */\n\nexport const login = (login: string, password: string) => async (dispatch: AppDispatch) => {\n  dispatch(setRequestStatus(REQUEST_STATUS.LOADING));\n  try {\n    await api.auth.login(login, password);\n    dispatch(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    dispatch(setAuthStatus(true));\n  } catch (e) {\n    dispatch(setRequestStatus(REQUEST_STATUS.ERROR));\n    dispatch(addError({ error: e.message }));\n  }\n};\n\nexport const logout = () => async (dispatch: AppDispatch) => {\n  dispatch(setRequestStatus(REQUEST_STATUS.LOADING));\n  try {\n    await api.auth.logout();\n    dispatch(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    dispatch(setAuthStatus(false));\n  } catch (e) {\n    dispatch(setRequestStatus(REQUEST_STATUS.ERROR));\n    dispatch(addError({ error: e.message }));\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addElement, REQUEST_STATUS, setRequestStatus } from '../../redux/actions';\nimport './CreateForm.css';\nimport { Store } from '../../redux';\n\nexport const CreateForm = () => {\n  const [name, setName] = useState('');\n  const requestState = useSelector((state: Store) => state.todo.requestStatus);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (requestState == REQUEST_STATUS.SUCCESS) {\n      setName('');\n      dispatch(setRequestStatus(REQUEST_STATUS.IDLE));\n    }\n  }, [requestState]);\n\n  const createListItem = async () => {\n    dispatch(addElement(name));\n  };\n\n  return (\n    <>\n      <form data-testid=\"create-form\" action=\"#\" onSubmit={createListItem}>\n        <input\n          className=\"create-field\"\n          data-testid=\"create-input\"\n          type=\"text\"\n          value={name}\n          disabled={requestState == REQUEST_STATUS.LOADING}\n          placeholder=\"Type here to add\"\n          onChange={event => setName(event.target.value)}\n        />\n      </form>\n    </>\n  );\n};\n","import { Action, ACTION_TYPES } from '../actionTypes';\n\nexport const ITEM_STATE_FILTER = {\n  ALL: 'All',\n  DONE: 'Done',\n  NOT_DONE: 'Not done'\n};\n\nexport type ITEM_STATE_FILTER_TYPE =\n  | typeof ITEM_STATE_FILTER.ALL\n  | typeof ITEM_STATE_FILTER.DONE\n  | typeof ITEM_STATE_FILTER.NOT_DONE;\n\nexport type FilterSlice = {\n  searchString: string;\n  category: ITEM_STATE_FILTER_TYPE;\n};\n\nexport const filterInitialState: FilterSlice = {\n  searchString: '',\n  category: ITEM_STATE_FILTER.ALL\n};\n\nexport function filterReducer(\n  state: FilterSlice = filterInitialState,\n  action: Action\n): FilterSlice {\n  switch (action.type) {\n    case ACTION_TYPES.FILTER_CHANGED: {\n      state.searchString = action.payload.searchString;\n      return { ...state };\n    }\n\n    case ACTION_TYPES.CATEGORY_CHANGED: {\n      state.category = action.payload.category;\n      return { ...state };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { Error, Item } from './reducers/todos';\nimport { createSelector } from 'reselect';\nimport { ITEM_STATE_FILTER_TYPE, ITEM_STATE_FILTER } from './reducers/filter';\nimport { Store } from '.';\n\nexport function selectListByItemState(list: Item[], itemState: ITEM_STATE_FILTER_TYPE): Item[] {\n  switch (itemState) {\n    case ITEM_STATE_FILTER.DONE:\n      return list.filter(el => el.isChecked);\n    case ITEM_STATE_FILTER.NOT_DONE:\n      return list.filter(el => !el.isChecked);\n    default:\n      return list;\n  }\n}\n\nexport function selectListByFilterString(list: Item[], filterString: string): Item[] {\n  return list.filter(el => el.title.toLowerCase().includes(filterString.toLowerCase()));\n}\n\nexport const selectListByFilter = createSelector(\n  (state: Store) => state.todo.list,\n  (state: Store) => state.filter.category,\n  (state: Store) => state.filter.searchString,\n  (list: Item[], category: ITEM_STATE_FILTER_TYPE, filterString: string) =>\n    selectListByItemState(selectListByFilterString(list, filterString), category)\n);\n\nexport const selectErrors = createSelector(\n  (state: Store) => state.todo.errors,\n  (errors: Error[]) => errors\n);\n\nexport const selectItemsCount = createSelector(\n  (state: Store) => state.todo.list,\n  (list: Item[]) => ({\n    [ITEM_STATE_FILTER.ALL]: list.length,\n    [ITEM_STATE_FILTER.DONE]: selectListByItemState(list, ITEM_STATE_FILTER.DONE).length,\n    [ITEM_STATE_FILTER.NOT_DONE]: selectListByItemState(list, ITEM_STATE_FILTER.NOT_DONE).length\n  })\n);\n\nexport const selectListTitles = createSelector(\n  (state: Store) => state.todo.list,\n  (list: Item[]): string[] => list.map(el => el.title)\n);\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeCategory, changeFilter } from '../../redux/actions';\nimport { selectItemsCount } from '../../redux/selectors';\nimport './SearchPanel.css';\nimport { ITEM_STATE_FILTER } from '../../redux/reducers/filter';\nimport { Store } from '../../redux';\n\ninterface SearchPanelType {\n  filterValues: typeof ITEM_STATE_FILTER;\n}\n\nexport const SearchPanel = ({ filterValues }: SearchPanelType) => {\n  const [search, setSearch] = useState('');\n  const items = useSelector(selectItemsCount);\n  const currentItemState = useSelector((store: Store) => store.filter.category);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <input\n        className=\"search-field\"\n        placeholder=\"Type here to search\"\n        data-testid=\"search-input\"\n        type=\"text\"\n        value={search}\n        onChange={e => {\n          dispatch(\n            changeFilter({\n              searchString: e.target.value\n            })\n          );\n          setSearch(e.target.value);\n        }}\n      />\n      <div className=\"option-wrapper\">\n        {Object.entries(filterValues).map(([key, value]) => (\n          <a\n            className={currentItemState === value ? 'selectedOption option-item' : 'option-item'}\n            data-testid={'option' + value}\n            key={key}\n            role=\"option\"\n            onClick={() => dispatch(changeCategory({ category: value }))}\n          >\n            {value} ({items[value]})\n          </a>\n        ))}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Item } from '../../redux/reducers/todos';\nimport { editElement } from '../../redux/actions';\nimport './EditListItem.css';\nimport { FaWindowClose } from 'react-icons/fa';\n\ninterface EditListItemFormProps {\n  item: Item;\n  closeItem: () => void;\n}\n\nexport const EditListItem = ({ item, closeItem }: EditListItemFormProps) => {\n  const [name, setName] = useState(item.title);\n  const dispatch = useDispatch();\n  function submitHandler(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    if (name !== '') {\n      dispatch(\n        editElement({\n          id: item.id,\n          title: name,\n          isChecked: undefined\n        })\n      );\n    }\n    closeItem();\n  }\n\n  return (\n    <div className=\"edit-list-item-background\">\n      <form\n        className=\"edit-list-item-form\"\n        data-testid=\"editForm\"\n        action=\"\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => submitHandler(e)}\n      >\n        <input\n          className=\"edit-list-item-input\"\n          data-testid=\"edit-input\"\n          type=\"text\"\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n          }}\n        />\n        <button\n          type=\"button\"\n          className=\"edit-list-item-button\"\n          data-testid=\"edit-button\"\n          onClick={closeItem}\n        >\n          <FaWindowClose />\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { EditListItem } from '../EditListItemForm/EditListItemForm';\nimport { useDispatch } from 'react-redux';\nimport { Item } from '../../redux/reducers/todos';\nimport { editElement, removeElement } from '../../redux/actions';\nimport { FaTrash, FaEdit } from 'react-icons/fa';\nimport './ListItem.css';\n\ninterface ListItemProps {\n  item: Item;\n}\n\nexport const ListItem = ({ item }: ListItemProps) => {\n  const isDone = { textDecoration: 'line-through' };\n  const [isEdit, setIsEdit] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div className=\"item-wrapper\">\n        <div title={item.title} className=\"item-container\">\n          <input\n            id={item.id}\n            className=\"checkbox\"\n            data-testid=\"item-checkbox\"\n            type=\"checkbox\"\n            checked={item.isChecked}\n            onChange={() =>\n              dispatch(\n                editElement({\n                  id: item.id,\n                  isChecked: !item.isChecked,\n                  title: undefined\n                })\n              )\n            }\n          />\n          <label\n            className=\"label-for-checkbox\"\n            htmlFor={item.id}\n            data-testid=\"list-item\"\n            style={item.isChecked ? isDone : {}}\n          >\n            {item.title}\n          </label>\n        </div>\n        <div>\n          <button\n            className=\"button button-remove\"\n            data-testid=\"remove-button\"\n            onClick={() => dispatch(removeElement(item.id))}\n          >\n            <FaTrash />\n          </button>\n          <button\n            className=\"button button-edit\"\n            data-testid=\"edit-cancel-button\"\n            onClick={() => setIsEdit(!isEdit)}\n          >\n            <FaEdit />\n          </button>\n        </div>\n      </div>\n      {isEdit && (\n        <div className=\"edit-item-form\">\n          <EditListItem item={item} closeItem={() => setIsEdit(false)} />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { ListItem } from '../ListItem/ListItem';\nimport { useSelector } from 'react-redux';\nimport { selectListByFilter } from '../../redux/selectors';\n//import { getElements } from '../../redux/actions';\n\nexport const List = () => {\n  const list = useSelector(selectListByFilter);\n  //const dispatch = useDispatch();\n\n  /*  useEffect(() => {\n    dispatch(getElements());\n  }, []);*/\n\n  return (\n    <>\n      {list.map(item => (\n        <ListItem key={item.id} item={item} />\n      ))}\n    </>\n  );\n};\n","import { CreateForm } from '../../components/CreateForm/CreateForm';\nimport { SearchPanel } from '../../components/SearchPanel/SearchPanel';\nimport { List } from '../../components/List/List';\nimport { ITEM_STATE_FILTER } from '../../redux/reducers/filter';\nimport React from 'react';\nimport { FaSignOutAlt } from 'react-icons/all';\nimport { useDispatch } from 'react-redux';\nimport { logout } from '../../redux/actions';\n\nexport const Todos = () => {\n  const dispatch = useDispatch();\n\n  function logoutHandle() {\n    dispatch(logout());\n  }\n\n  return (\n    <div className=\"todo-wrapper\">\n      <button className=\"button-close\" onClick={logoutHandle}>\n        <FaSignOutAlt />\n      </button>\n      <div className=\"content-main\">\n        <div className=\"header-main\">Todo List</div>\n        <div className=\"search-form\">\n          <SearchPanel filterValues={ITEM_STATE_FILTER} />\n        </div>\n        <div className=\"list-items\">\n          <List />\n        </div>\n        <div className=\"create-form\">\n          <CreateForm />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Spinner.css';\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\" data-testid=\"spinner\">\n      <div className=\"spinner-item item1\" />\n      <div className=\"spinner-item item2\" />\n      <div className=\"spinner-item item3\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { Error } from '../../redux/reducers/todos';\nimport { useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { clearErrors } from '../../redux/actions';\nimport { FaWindowClose } from 'react-icons/fa';\nimport './AlertItem.css';\n\ntype AlertItemProps = {\n  error: Error;\n  delay: number;\n};\n\nexport const AlertItem = ({ error, delay }: AlertItemProps) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    let timer = setTimeout(() => dispatch(clearErrors({ id: error.id })), delay);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div key={error.id} className=\"alert\">\n      <button\n        className=\"close\"\n        onClick={() => dispatch(clearErrors({ id: error.id }))}\n        data-testid=\"alert-close\"\n      >\n        <FaWindowClose />\n      </button>\n      <div data-testid=\"error\">{error.title}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectErrors } from '../../redux/selectors';\nimport { AlertItem } from '../AlertItem/AlertItem';\n\ntype AlertProps = {\n  delay: number;\n};\n\nexport const Alert = ({ delay }: AlertProps) => {\n  const errors = useSelector(selectErrors);\n\n  if (errors.length) {\n    return (\n      <div data-testid=\"alert\">\n        {errors.map(error => (\n          <AlertItem error={error} key={error.id} delay={delay} />\n        ))}\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n","import React, { FormEvent, useState } from 'react';\nimport './Login.css';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../../redux/actions';\n\nexport const Login = () => {\n  const dispatch = useDispatch();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  function handleSubmit(e: FormEvent) {\n    e.preventDefault();\n    dispatch(login(username, password));\n  }\n\n  return (\n    <form onSubmit={handleSubmit} action=\"#\" data-testid=\"login-form\" className=\"login-form\">\n      <h1 className=\"login-header\">Nice to see you!</h1>\n      <input\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n        placeholder=\"Enter login\"\n        className=\"login-input\"\n        type=\"text\"\n        name=\"login\"\n        data-testid=\"login\"\n      />\n      <input\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n        placeholder=\"Enter password\"\n        className=\"login-input\"\n        type=\"password\"\n        name=\"password\"\n        data-testid=\"password\"\n      />\n      <button className=\"login-submit\" type=\"submit\" data-testid=\"submit-login\">\n        Login\n      </button>\n    </form>\n  );\n};\n","import { Action, ACTION_TYPES } from '../actionTypes';\n\nexport const AUTH_STATE = {\n  IDLE: 'All',\n  SUCCESS: 'Done',\n  FAILURE: 'Not done'\n};\n\nexport type AUTH_STATE_TYPE =\n  | typeof AUTH_STATE.IDLE\n  | typeof AUTH_STATE.SUCCESS\n  | typeof AUTH_STATE.FAILURE;\n\nexport type AuthSlice = {\n  state: AUTH_STATE_TYPE;\n};\n\nexport const authInitialState: AuthSlice = {\n  state: AUTH_STATE.IDLE\n};\n\nexport function authReducer(state: AuthSlice = authInitialState, action: Action): AuthSlice {\n  switch (action.type) {\n    case ACTION_TYPES.SET_AUTH_STATUS: {\n      if (action.payload.state) {\n        state.state = AUTH_STATE.SUCCESS;\n      } else {\n        state.state = AUTH_STATE.FAILURE;\n      }\n      return { ...state };\n    }\n\n    default:\n      return state;\n  }\n}\n","import React, { useEffect } from 'react';\nimport './views/Todos/Todos.css';\nimport { Todos } from './views/Todos/Todos';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Spinner from './components/Spinner/Spinner';\nimport { initialAuthCheck, REQUEST_STATUS } from './redux/actions';\nimport { Alert } from './components/Alert/Alert';\nimport { Store } from './redux';\nimport { Route, Switch } from 'react-router';\nimport { Login } from './components/Login/Login';\nimport { AUTH_STATE } from './redux/reducers/auth';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(initialAuthCheck());\n  }, []);\n\n  const isLoading = useSelector((store: Store) => store.todo.requestStatus);\n  const authState = useSelector((store: Store) => store.auth.state);\n  return (\n    <>\n      <Switch>\n        {authState === AUTH_STATE.SUCCESS && <Route path=\"/\" component={Todos} />}\n        {authState === AUTH_STATE.FAILURE && <Route path=\"/\" component={Login} />}\n      </Switch>\n      <Alert delay={3000} />\n      {isLoading === REQUEST_STATUS.LOADING && <Spinner />}\n    </>\n  );\n}\n\nexport default App;\n","import { Action, ACTION_TYPES } from '../actionTypes';\nimport { REQUEST_STATUS } from '../actions';\nimport { nanoid } from 'nanoid';\n\nexport interface Item {\n  id: string;\n  isChecked: boolean;\n  title: string;\n}\n\nexport interface Error {\n  id: string;\n  title: string;\n}\n\nexport type TodoSlice = {\n  list: Item[];\n  requestStatus: REQUEST_STATUS;\n  errors: Error[];\n};\n\nexport const todoInitialState: TodoSlice = {\n  list: [],\n  requestStatus: REQUEST_STATUS.IDLE,\n  errors: []\n};\n\nexport function todosReducer(state: TodoSlice = todoInitialState, action: Action): TodoSlice {\n  switch (action.type) {\n    case ACTION_TYPES.REMOVE: {\n      return {\n        ...state,\n        list: [...state.list.filter(el => el.id !== action.payload.id)]\n      };\n    }\n\n    case ACTION_TYPES.EDIT: {\n      return {\n        ...state,\n        list: [\n          ...state.list.map(item => {\n            if (item.id === action.payload.id) {\n              if (action.payload.title !== undefined) {\n                item.title = action.payload.title;\n              }\n              if (action.payload.isChecked !== undefined) {\n                item.isChecked = action.payload.isChecked;\n              }\n            }\n            return item;\n          })\n        ]\n      };\n    }\n\n    case ACTION_TYPES.CREATE: {\n      return { ...state, list: [...state.list, action.payload.item] };\n    }\n\n    case ACTION_TYPES.CLEAR_ERRORS: {\n      return {\n        ...state,\n        errors: state.errors.filter((error: Error) => error.id != action.payload.id)\n      };\n    }\n\n    case ACTION_TYPES.ADD_ERROR: {\n      const error = {\n        id: nanoid(),\n        title: action.payload.error\n      };\n      return { ...state, errors: [...state.errors, error] };\n    }\n\n    case ACTION_TYPES.LOAD_MESSAGES: {\n      return { ...state, list: action.payload.list };\n    }\n\n    case ACTION_TYPES.SET_REQUEST_STATUS: {\n      return { ...state, requestStatus: action.payload.requestStatus };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { todosReducer } from './todos';\nimport { filterReducer } from './filter';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { authReducer } from './auth';\n\nconst createRootReducer = (history: History) =>\n  combineReducers({\n    todo: todosReducer,\n    filter: filterReducer,\n    auth: authReducer,\n    router: connectRouter(history)\n  });\n\nexport default createRootReducer;\n","import { ACTION_TYPES } from '../actionTypes';\nimport { takeEvery, call, put, fork } from 'redux-saga/effects';\nimport api from '../../components/api';\nimport {\n  addError,\n  loadMessages,\n  REQUEST_STATUS,\n  setAuthStatus,\n  setRequestStatus\n} from '../actions';\n\nexport default function* rootSaga() {\n  yield takeEvery(ACTION_TYPES.INITIAL_AUTH, initialAuthSaga);\n}\n\nexport function* initialAuthSaga() {\n  try {\n    yield put(setRequestStatus(REQUEST_STATUS.LOADING));\n    yield call(api.auth.isAuth);\n    yield put(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    yield put(setAuthStatus(true));\n    yield fork(getElementsSaga);\n  } catch (e) {\n    yield put(setRequestStatus(REQUEST_STATUS.ERROR));\n    yield put(setAuthStatus(false));\n    yield put(addError({ error: e.message }));\n  }\n}\n\nexport function* getElementsSaga() {\n  try {\n    yield put(setRequestStatus(REQUEST_STATUS.LOADING));\n    // @ts-ignore\n    const data = yield call(api.todos.list);\n    yield put(setRequestStatus(REQUEST_STATUS.SUCCESS));\n    yield put(loadMessages({ list: data }));\n  } catch (e) {\n    yield put(setRequestStatus(REQUEST_STATUS.ERROR));\n    yield put(addError({ error: e.message }));\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport createRootReducer from './reducers';\nimport rootSaga from './sagas';\nimport { todoInitialState, TodoSlice } from './reducers/todos';\nimport { filterInitialState, FilterSlice } from './reducers/filter';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { authInitialState, AuthSlice } from './reducers/auth';\n\nexport const history = createBrowserHistory();\n\nexport type Store = {\n  todo: TodoSlice;\n  filter: FilterSlice;\n  auth: AuthSlice;\n};\n\nexport const initialState: Store = {\n  todo: todoInitialState,\n  filter: filterInitialState,\n  auth: authInitialState\n};\n\nexport const rootReducer = createRootReducer(history);\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, routerMiddleware(history), sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga);\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport store, { history } from './redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}